set encoding=utf-8
set nocompatible    "run in vim mode
" Will install plugins if not detected
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 
endif

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  "Colorscheme
  Plug 'arcticicestudio/nord-vim'
  Plug 'flazz/vim-colorschemes'

  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'

  "ruby
  Plug 'vim-ruby/vim-ruby'
  Plug 'ngmy/vim-rubocop'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'
  Plug 'prettier/vim-prettier'

  "file exploration
  Plug 'scrooloose/nerdtree'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

  " Linting
  Plug 'w0rp/ale'

  " Snippets
  Plug 'SirVer/ultisnips'
call plug#end()

let mapleader = " " "space is now \

set autowrite

"indentations
set autoindent      "auto-indent new lines
set smartindent     "return ending brackets to proper locations

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
" set textwidth=80
set colorcolumn=81

"Numbers
set number
set numberwidth=5

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·
  
set showmatch       "show matching brackets
set ruler           "show cursor position at all times
set nohls           "don't highlight the previous search term
set number          "turn on line numbering
set wrap            "turn on visual word wrapping
set linebreak       "only break lines on 'breakat' characters
set foldmethod=indent
set nofoldenable
syntax on           "turn on syntax highlighting
set nobackup        "no backups
set nowritebackup   "no backup file while editing
set noswapfile      "no creation of swap files
filetype plugin indent on
set backspace=indent,eol,start "fixes backspace in vim
set wildmenu
set showcmd
set history=50
set incsearch "incremental searching
set hidden
set lazyredraw "Fixes files at the end of macros
set relativenumber "if on line 5, line 4 will be 1 and line 6 will be 1 etc
set guifont=DejavuSansMono\ Nerd\ Font\ 14
set clipboard=unnamed "stupid clipboard crap
set linespace=3
set cursorcolumn "Makes working with yaml files easier

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim 

" Tags searching
set tags=./tags

if has('nvim') || has('termguicolors')
  set termguicolors
  set t_Co=256
endif

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif
 
augroup filetypedetect 
  au! BufRead,BufNewFile *nc setfiletype nc "http://www.vim.org/scripts/script.php?script_id=1847
  "html.ep now handled by https://github.com/yko/mojo.vim
  autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp
augroup END 

"removes auto-commenting when hitting <CR>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"strip trailing whitespace from certain files
autocmd BufWritePre *.conf :%s/\s\+$//e
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.css :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.rb :%s/\s\+$//e

:set bs=2 "fix backspace on some consoles

" set spacing on ruby files
autocmd FileType ruby,eruby,yaml setlocal expandtab shiftwidth=2 tabstop=2

set background=dark
let g:quantum_black = 1
let g:nord_uniform_status_lines = 1
colorscheme nord

" use default
set laststatus=2
set statusline=
set statusline+=%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=

" Using splits
map <Leader>s :split<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>ev :split $HOME/.vimrc<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

"fzf config
map <Leader>f :FZF <Esc>
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" uses silver searcher for faster searches
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
" end fzf config

" rubocop mapping
nmap <Leader>rr :RuboCop<CR>
nmap <Leader>ra :RuboCop -a<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o 

inoremap <C-j> <Down>
let g:ragtag_global_maps = 1 "available globally

" Rebinds ctrl-x ctrl-k to not interfere with snippet jumping
inoremap <c-x><c-k> <c-k><c-x>

" tag completion
inoremap <c-x><c-]> <c-]>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Plug commands
map <Leader>pi :PlugInstall<CR>
map <Leader>pu :PlugUpdate<CR>
map <Leader>pru :UpdateRemotePlugins<CR>
map <Leader>pc :PlugClean<CR>

" Ultisnips config
let g:UltiSnipsSnippetDirectories=[$HOME.'/.my-snippets']

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit='horizontal'
map <Leader>us :UltiSnipsEdit <ESC>

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <Leader>rn :call RenameFile()<cr>

function! Touch()
  let current_dir = expand('%:h')
  let file_name = input('New file name: ', current_dir . '/')

  exec ':e ' . file_name
endfunction

map <Leader>n :call Touch()<CR>

map <Leader>bl :set background=light<CR>
map <Leader>bd :set background=dark<CR>


nnoremap j gj
nnoremap k gk

map <C-n> :NERDTreeToggle<CR>

let g:ale_lint_delay = 500
